{"version":3,"sources":["components/TimeOverview.js","components/Item.js","components/ItemList.js","App.js","serviceWorker.js","index.js"],"names":["TimeOverview","props","state","value","endTime","timeAvailable","timeUsed","date","Date","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","d","setHours","Number","slice","getHours","setMinutes","getMinutes","setInterval","toTimeString","onSubmit","type","onChange","React","Component","Item","name","maxLength","id","data","order","hours","minutes","size","description","ItemList","onClick","sortList","listOfData","map","x","App","dataObj","handleClick","newList","Array","sort","a","b","i","length","e","test","Object","assign","concat","newObj","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97972102.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass TimeOverview extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            value: \"\",\r\n            endTime: \"\",           \r\n            timeAvailable: null,\r\n            timeUsed: 0,\r\n            date: new Date(Date()),\r\n    }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({\r\n            value: event.target.value,\r\n        })\r\n    }\r\n    handleSubmit(event){\r\n        //use current time to set value of time available\r\n        event.preventDefault();\r\n        this.setState({\r\n            endTime: this.state.value,\r\n            timeAvailable: (() => {\r\n                let d = new Date()\r\n                d.setHours(Number(this.state.endTime.slice(0,2)) - d.getHours())\r\n                d.setMinutes(Number(this.state.endTime.slice(3,5))- d.getMinutes())\r\n                return d\r\n            })(),\r\n        })\r\n    };\r\n    componentDidMount(){\r\n        setInterval(() => {\r\n            this.setState({\r\n                date: new Date()\r\n            });\r\n            if (this.state.timeAvailable != null){\r\n                this.setState({\r\n                    timeAvailable: (() => {\r\n                        let d = new Date()\r\n                        d.setHours(Number(this.state.endTime.slice(0,2)) - d.getHours())\r\n                        d.setMinutes(Number(this.state.endTime.slice(3,5))- d.getMinutes())\r\n                        return d\r\n                    })(),\r\n                });\r\n            }   \r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ul>\r\n                <li>\r\n                    Current Time is {this.state.date.toTimeString().slice(0,5)}\r\n                </li>\r\n                <li>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <label>\r\n                            End Time:\r\n                            <input type=\"time\" value={this.state.value} onChange={this.handleChange} />\r\n                        </label>\r\n                        <input type='submit' value='Submit'/>\r\n                    </form>\r\n                </li>\r\n                <li>\r\n                    Time Available: {this.state.timeAvailable == null ? \"00:00\" : this.state.timeAvailable.toTimeString().slice(0,8)}\r\n                </li>\r\n                <li>\r\n                    Time Used: {this.state.timeUsed}\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n        \r\n        //current accurate time by date and minute\r\n        //an end time, preferably not over 24 hours\r\n        //when end time entered lock it as a set date\r\n        //hours/minutes available\r\n        //time used as sum of list items min.\r\n}\r\n\r\nexport default TimeOverview","import React from 'react'\r\n\r\nclass Item extends React.Component {\r\n  \r\n  render(){\r\n    return(\r\n      <div>\r\n        <input type= \"text\" name='name' maxLength={20} id={this.props.data.id} value={this.props.data.name} onChange={this.props.onChange}/>\r\n        <input type= 'text' name='order' maxLength={2} id={this.props.data.id} value={this.props.data.order} onChange={this.props.onChange}/>\r\n        <input type= 'text' name='hours' maxLength={2} id={this.props.data.id} value={this.props.data.hours} onChange={this.props.onChange}/>\r\n        <input type= 'text' name='minutes' maxLength={2} id={this.props.data.id} value={this.props.data.minutes} onChange={this.props.onChange}/>\r\n        <input type= 'textbox' size=\"40\" name='description' id={this.props.data.id} value={this.props.data.description} onChange={this.props.onChange}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Item","import React from 'react'\r\nimport Item from './Item'\r\n\r\nclass ItemList extends React.Component{\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <form>\r\n          <input type=\"button\" value=\"Add Item\" onClick={this.props.onClick}/>\r\n          <input type=\"button\" value=\"Sort by order\" onClick={this.props.sortList} />\r\n        </form>\r\n        <ul>\r\n          {this.props.listOfData.map((x) => <Item data={x} onChange={this.props.onChange}/>)}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ItemList","import React from 'react';\r\nimport TimeOverview from './components/TimeOverview'\r\nimport ItemList from './components/ItemList'\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      listOfData: [],\r\n      dataObj: {\r\n        name: '',\r\n        order: '1',\r\n        minutes: null,\r\n        hours: null,\r\n        description: '',\r\n        id: 0,\r\n      }\r\n    }\r\n    this.handleClick = this.handleClick.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.sortList = this.sortList.bind(this)\r\n  }\r\n  sortList() {\r\n    this.setState({\r\n      listOfData: (() => {\r\n        let newList = new Array(...this.state.listOfData)\r\n        newList.sort(function(a,b){\r\n          if (a.order !== b.order){\r\n            return Number(a.order) - Number(b.order)\r\n          }\r\n          else {\r\n            return Number(a.order) - Number(b.order) - 1\r\n          }\r\n        })\r\n        for(let i = 0; i < newList.length; i++){\r\n          newList[i].order = i +1\r\n        }\r\n        return newList\r\n      })()\r\n    })\r\n  }\r\n  handleChange(e) {\r\n    this.setState({\r\n      listOfData: this.state.listOfData.map((x) => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n        if (x.id === Number(e.target.id)){\r\n          switch(e.target.name){\r\n            case 'name':\r\n              x[name] = value\r\n              break\r\n            case 'order':\r\n              if (/^[1-9]?$|^[1-9][\\d]$/.test(value))\r\n                x[name] = value\r\n              break\r\n            case 'hours':\r\n              if (/^[\\d]?$|^1[\\d]$|^2[0-4]$/.test(value))\r\n                x[name] = value\r\n              break\r\n            case 'minutes':\r\n              if(/^[\\d]$|^[1-5][\\d]$/.test(value))\r\n              x[name] = value\r\n              break\r\n            case 'description':\r\n              x[name] = value\r\n              break\r\n            default:\r\n          }\r\n          \r\n        }\r\n        return x\r\n      })\r\n    })\r\n  }\r\n  handleClick(){\r\n    const data = Object.assign({}, this.state.dataObj)\r\n    this.setState({\r\n      listOfData: this.state.listOfData.concat(data),\r\n      dataObj: (() => {\r\n        let newObj = this.state.dataObj;\r\n        newObj.order = (Number(newObj.order) + 1).toString()\r\n        newObj.id += 1\r\n        return newObj\r\n      })()\r\n    })\r\n  }\r\n  render(){\r\n    return (\r\n    <div>\r\n      <TimeOverview />\r\n      <ItemList onClick={this.handleClick} onChange={this.handleChange} sortList={this.sortList} listOfData={this.state.listOfData}/>\r\n    </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}